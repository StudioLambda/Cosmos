package problem

import (
	_ "embed"
	"encoding/json"
	"fmt"
	"maps"
	"net/http"

	"github.com/studiolambda/cosmos/problem/internal"
)

// Problem represents a problem details for HTTP APIs.
// See https://datatracker.ietf.org/doc/html/rfc9457 for more information.
type Problem struct {

	// err stores the native error of the problem if
	// it happens to have one. This struct member can be
	// nil if the problem was created manually.
	//
	// Refer to [NewProblem] to automatically assign an error
	// to the new Problem.
	err error

	// additional stores additional metadata that will be
	// appended to the problem JSON representation. It is used
	// to serialize and de-serialize properties.
	additional map[string]any

	// Type member is a JSON string containing a URI reference
	// that identifies the problem type.
	//
	// Consumers MUST use the Type URI (after resolution,
	// if necessary) as the problem type's primary identifier.
	//
	// When this member is not present, its value is assumed
	// to be "about:blank".
	Type string

	// Title member is a string containing a short,
	// human-readable summary of the problem type.
	//
	// It SHOULD NOT change from occurrence to occurrence of
	// the problem, except for localization (e.g., using proactive
	// content negotiation.
	//
	// The Title string is advisory and is included only for users
	// who are unaware of and cannot discover the semantics of the
	// type URI (e.g., during offline log analysis).
	Title string

	// Detail member is a JSON string containing a human-readable
	// explanation specific to this occurrence of the problem.
	//
	// The Detail string, if present, ought to focus on helping
	// the client correct the problem, rather than giving debugging information.
	//
	// Consumers SHOULD NOT parse the Detail member for information.
	//
	// Extensions are more suitable and less error-prone ways to obtain
	// such information.
	Detail string

	// The Status member is a JSON number indicating the HTTP status
	// code generated by the origin server for this occurrence of the problem.
	//
	// The "status" member, if present, is only advisory; it conveys the HTTP
	// status code used for the convenience of the consumer.
	//
	// Generators MUST use the same status code in the actual HTTP response,
	// to assure that generic HTTP software that does not understand this format
	// still behaves correctly.
	//
	// Consumers can use the status member to determine what the original status
	// code used by the generator was when it has been changed
	// (e.g., by an intermediary or cache) and when a message's content is
	// persisted without HTTP information. Generic HTTP software will still
	// use the HTTP status code.
	Status int

	// 	The "instance" member is a JSON string containing a URI reference that
	// identifies the specific occurrence of the problem.
	//
	// When the "instance" URI is dereferenceable, the problem details object
	// can be fetched from it. It might also return information about the problem
	// occurrence in other formats through use of proactive content negotiation.
	//
	// When the "instance" URI is not dereferenceable, it serves as a unique identifier
	// for the problem occurrence that may be of significance to the server but is
	// opaque to the client.
	//
	// When "instance" contains a relative URI, it is resolved relative to the document's
	// base URI. However, using relative URIs can cause confusion, and they might not
	// be handled correctly by all implementations.
	//
	// For example, if the two resources "https://api.example.org/foo/bar/123"
	// and "https://api.example.org/widget/456" both respond with an "instance" equal
	// to the relative URI reference "example-instance", when resolved they will
	// identify different resources ("https://api.example.org/foo/bar/example-instance"
	// and "https://api.example.org/widget/example-instance", respectively).
	//
	// As a result, it is RECOMMENDED that absolute URIs be used in "instance" when possible,
	// and that when relative URIs are used, they include the full path (e.g., "/instances/123").
	Instance string
}

// Determines the key that's used to
// store the traces in a [Problem].
const StackTraceKey = "stack_trace"

// NewProblem creates a new [Problem] from
// the given error and status code.
func NewProblem(err error, status int) Problem {
	return Problem{
		err:    err,
		Status: status,
	}
}

// Additional returns the additional value of the given key.
//
// Use [Problem.With] to add additional values.
// Use [Problem.Without] to remove additional values.
func (problem Problem) Additional(key string) (any, bool) {
	additional, ok := problem.additional[key]

	return additional, ok
}

// With adds a new additional value to the given key.
func (problem Problem) With(key string, value any) Problem {
	if problem.additional == nil {
		problem.additional = map[string]any{key: value}

		return problem
	}

	problem.additional = maps.Clone(problem.additional)
	problem.additional[key] = value

	return problem
}

// WithError returns a new [Problem] with the given error
// set as the
func (problem Problem) WithError(err error) Problem {
	problem.err = err

	return problem
}

// WithoutError returns a new [Problem] with the error
// that's associated with it removed.
func (problem Problem) WithoutError() Problem {
	problem.err = nil

	return problem
}

// Without removes an additional value to the given key.
func (problem Problem) Without(key string) Problem {
	if problem.additional == nil {
		return problem
	}

	problem.additional = maps.Clone(problem.additional)
	delete(problem.additional, key)

	return problem
}

// Error is the error-like string representation of a [Problem].
func (problem Problem) Error() string {
	if problem.err != nil {
		return fmt.Sprintf("%d %s: %s", problem.Status, http.StatusText(problem.Status), problem.err)
	}

	return fmt.Sprintf("%d %s: %s", problem.Status, http.StatusText(problem.Status), problem.Title)
}

// Errors returns all the strack-trace of errors that
// are bound to this particular [Problem].
func (problem Problem) Errors() []error {
	return stackTrace(problem.err)
}

// Unwrap is used to get the original error from
// the problem to use with the errors pkg.
func (problem Problem) Unwrap() error {
	return problem.err
}

// WithStackTrace adds the error traces to the [Problem]
// using the current problem. It's important to first
// setup the problem's error with either [NewProblem] or
// by using [Problem.WithError] before calling this method.
func (problem Problem) WithStackTrace() Problem {
	traces := problem.Errors()
	messages := make([]string, len(traces))

	for i, trace := range traces {
		messages[i] = trace.Error()
	}

	return problem.With(StackTraceKey, messages)
}

// WithoutStackTrace removes the traces from the [Problem]
func (problem Problem) WithoutStackTrace() Problem {
	return problem.Without(StackTraceKey)
}

// MarshalJSON replaces the default JSON encoding behaviour.
func (problem Problem) MarshalJSON() ([]byte, error) {
	mapped := make(map[string]any, len(problem.additional)+5)

	mapped["detail"] = problem.Detail
	mapped["instance"] = problem.Instance
	mapped["status"] = problem.Status
	mapped["title"] = problem.Title
	mapped["type"] = problem.Type

	maps.Copy(mapped, problem.additional)

	return json.Marshal(mapped)
}

// UnmarshalJSON replaces the default JSON decoding behaviour.
func (problem *Problem) UnmarshalJSON(data []byte) error {
	mapped := make(map[string]any)

	if err := json.Unmarshal(data, &mapped); err != nil {
		return err
	}

	if value, ok := mapped["detail"].(string); ok {
		problem.Detail = value
	}

	if value, ok := mapped["instance"].(string); ok {
		problem.Instance = value
	}

	if value, ok := mapped["status"].(float64); ok {
		problem.Status = int(value)
	}

	if value, ok := mapped["title"].(string); ok {
		problem.Title = value
	}

	if value, ok := mapped["type"].(string); ok {
		problem.Type = value
	}

	delete(mapped, "detail")
	delete(mapped, "instance")
	delete(mapped, "status")
	delete(mapped, "title")
	delete(mapped, "type")

	problem.additional = mapped

	return nil
}

// Defaulted returns a [Problem] that is defaulted using the given
// request and the current instance.
func (problem Problem) Defaulted(request *http.Request) Problem {
	if problem.Type == "" {
		problem.Type = "about:blank"
	}

	if problem.Status == 0 {
		problem.Status = http.StatusInternalServerError
	}

	if problem.Title == "" {
		problem.Title = http.StatusText(problem.Status)
	}

	if problem.Instance == "" {
		problem.Instance = request.URL.String()
	}

	if traces := problem.Errors(); problem.Detail == "" && len(traces) > 0 {
		problem.Detail = traces[0].Error()
	}

	return problem
}

func (problem Problem) textHandler(w http.ResponseWriter, r *http.Request) {
	textResponse := fmt.Sprintf(
		"%d %s\n\n%s",
		problem.Status,
		problem.Title,
		problem.Detail,
	)

	errors, found := problem.Additional(StackTraceKey)
	traces, tracesOK := errors.([]string)

	if found && tracesOK {
		textResponse += fmt.Sprintf("\n\n")

		for _, trace := range traces {
			textResponse += fmt.Sprintf("%s\n", trace)
		}
	}

	http.Error(w, textResponse, problem.Status)
}

func (problem Problem) jsonHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(problem.Status)

	_ = json.NewEncoder(w).Encode(problem)
}

func (problem Problem) jsonProblemHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(problem.Status)

	_ = json.NewEncoder(w).Encode(problem)
}

func (problem Problem) ServeHTTPDev(w http.ResponseWriter, r *http.Request) {
	problem.WithStackTrace().ServeHTTP(w, r)
}

func (problem Problem) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	problem = problem.Defaulted(r)
	responses := map[string]http.Handler{
		"application/problem+json": http.HandlerFunc(problem.jsonProblemHandler),
		"application/json":         http.HandlerFunc(problem.jsonHandler),
	}

	for _, media := range internal.ParseAccept(r).Order() {
		if response, ok := responses[media]; ok {
			response.ServeHTTP(w, r)
			return
		}
	}

	problem.textHandler(w, r)
}
